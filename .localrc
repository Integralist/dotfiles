#!/usr/bin/env bash

echo .localrc loaded

# Fig (Start)
#
[ -s ~/.fig/shell/pre.sh ] && source ~/.fig/shell/pre.sh

# environment
#
export GPG_TTY=$(tty)
export PATH="/usr/local/go/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$PATH:$HOME/.rvm/bin"
export PATH="$HOME/.pyenv/shims:$PATH"

# configure fnm node version manager
#
eval "$(fnm env)"

# ensure fnm supports yarn
# https://github.com/Schniz/fnm/issues/87#issuecomment-751366346
export YARN_GLOBAL_FOLDER="$FNM_MULTISHELL_PATH/yarn-global"
export YARN_PREFIX="$FNM_MULTISHELL_PATH"

# configure python environment
#
eval "$(python3 -m pip completion --bash)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# configure ruby environment
#
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# configure terraform auto-complete
#
complete -C /usr/local/bin/terraform terraform

# configure go environment
#
# Custom go binaries are installed in $HOME/go/bin.
#
# NOTE: Doesn't work when using Zoxide, and will leave the alias active when
# changing to a non-project directory.
#
function go_version {
    if [ -f "go.mod" ]; then
        v=$(grep -E '^go \d.+$' ./go.mod | grep -oE '\d.+$')
        eval alias go="go$v"
    fi
}

# To support the above go environment configuration we will override the cd
# command to call the go logic for checking the go version.
#
# We have a similar override in .bashrc and I've incorporated the ls call here
# as we can't inherit the cd implementation.
#
# NOTE: We use `command` and not `builtin` because the latter doesn't take into
# account anything available on the user's $PATH but also because it didn't
# work with the Starship prompt which seems to override cd also.
function cd {
  command cd "$@"
  RET=$?
  ls
  go_version
  return $RET
}

# configure rust environment
#
# - autocomplete
# - rust-analyzer
# - cargo audit
# - cargo fmt
#
if [ ! -f "$HOME/.config/rustlang/autocomplete/rustup" ]; then
    mkdir -p ~/.config/rustlang/autocomplete
    rustup completions bash rustup >> ~/.config/rustlang/autocomplete/rustup
fi
source "$HOME/.config/rustlang/autocomplete/rustup"
if ! command -v rust-analyzer &> /dev/null
then
    brew install rust-analyzer
fi
if ! cargo audit --version &> /dev/null; then
    cargo install cargo-audit --features=fix
fi
if ! cargo fmt --version &> /dev/null; then
    rustup component add rustfmt
fi
if ! cargo clippy --version &> /dev/null; then
    rustup component add clippy
fi

# broot (tree replacement) requires a companion shell function (br) to allow
# alt+enter to cd into a directory.
#
# If you install broot via Homebrew then `broot --install` will add a `source`
# to the br function for you. I've moved that line from my
# .bashrc/.bash_profile into here.
#
# Extra configuration can be found here:
# /Users/integralist/Library/Application Support/org.dystroy.broot/conf.hjson
#
if [ -f "/Users/integralist/Library/Application Support/org.dystroy.broot/launcher/bash/br" ]; then
    source "/Users/integralist/Library/Application Support/org.dystroy.broot/launcher/bash/br"
fi

# zoxide is a directory switcher
#
# z <pattern>
# zoxide query -ls
#
eval "$(zoxide init bash)"

# Alacritty
#
source ~/.bash_completion/alacritty

# Fig (End)
#
[ -s ~/.fig/fig.sh ] && source ~/.fig/fig.sh

# to ensure there are no duplicates in the $PATH we call dedupe
# the dedupe function is defined in .bashrc
#
dedupe
